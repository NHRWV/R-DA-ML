Predict.tra <- ifelse(Output.tra >= cutoff, 1, 0)
cTab <- table(Actual = D.tra$Class, Predict.tra)
Accu.tra <- round(sum(diag(cTab))/sum(cTab)*100, digits = 2)
Output.val <- predict(BPnn, D.val)
Predict.val <- ifelse(Output.val >= cutoff, 1, 0)
cTab <- table(Actual = D.val$Class, Predict.val)
Accu.val <- round(sum(diag(cTab))/sum(cTab)*100, digits = 2)
cat(sprintf('\n Thres = %4.2f Seed=%5d', Thres, wSeed))
#cat(' Thres', Thres)
#cat(' Seed', wSeed)
cat(' Tra =', Accu.tra)
cat(' Val =', Accu.val)
#Output.tes <- predict(BPnn, D.tes)
#Predict.tes <- ifelse(Output.val >= cutoff, 1, 0)
#cTab <- table(Actual = D.tes$Class, Predict.tes)
#Accu.tes <- sum(diag(cTab))/sum(cTab)*100
#cat(' Tes =', Accu.tes)
}
for (wSeed in wSeedlist){
set.seed(wSeed)
train <- sample.split(D.data$Class, SplitRatio = 0.6)
training <- D.data[train, ]
remainder <- D.data[!train, ]
validate <- sample.split(remainder$Class, SplitRatio = 0.5)
validation <- remainder[validate, ]
test <- remainder[!validate, ]
Tra <- training
Val <- validation
Tes <- test
D.tra <- Tra[, -c(1)]
D.val <- Val[, -c(1)]
D.tes <- Tes[, -c(1)]
D.tes$Class <- ifelse(D.tes$Class == 2, 0, 1)
D.tra$Class <- ifelse(D.tra$Class == 2, 0, 1)
D.val$Class <- ifelse(D.val$Class == 2, 0, 1)#이진분류 이렇게 설정 안해주면 오류남...
H42 <- c(6,3)
Thres <- 0.5
Step <- 100000
Rate <- 0.01
BPnn <- neuralnet(Class~., D.tra, hidden = H42, threshold = Thres, stepmax = Step, learningrate = Rate,
algorithm = 'backprop', err.fct = 'ce', act.fct = 'logistic', linear.output = FALSE)
cutoff <- 0.5
Output.tra <- predict(BPnn, D.tra)
head(Output.tra)
Predict.tra <- ifelse(Output.tra >= cutoff, 1, 0)
cTab <- table(Actual = D.tra$Class, Predict.tra)
Accu.tra <- round(sum(diag(cTab))/sum(cTab)*100, digits = 2)
Output.val <- predict(BPnn, D.val)
Predict.val <- ifelse(Output.val >= cutoff, 1, 0)
cTab <- table(Actual = D.val$Class, Predict.val)
Accu.val <- round(sum(diag(cTab))/sum(cTab)*100, digits = 2)
cat(sprintf('\n Thres = %4.2f Seed=%5d', Thres, wSeed))
#cat(' Thres', Thres)
#cat(' Seed', wSeed)
cat(' Tra =', Accu.tra)
cat(' Val =', Accu.val)
#Output.tes <- predict(BPnn, D.tes)
#Predict.tes <- ifelse(Output.val >= cutoff, 1, 0)
#cTab <- table(Actual = D.tes$Class, Predict.tes)
#Accu.tes <- sum(diag(cTab))/sum(cTab)*100
#cat(' Tes =', Accu.tes)
}
for (wSeed in wSeedlist){
set.seed(wSeed)
train <- sample.split(D.data$Class, SplitRatio = 0.6)
training <- D.data[train, ]
remainder <- D.data[!train, ]
validate <- sample.split(remainder$Class, SplitRatio = 0.5)
validation <- remainder[validate, ]
test <- remainder[!validate, ]
Tra <- training
Val <- validation
Tes <- test
D.tra <- Tra[, -c(1)]
D.val <- Val[, -c(1)]
D.tes <- Tes[, -c(1)]
D.tes$Class <- ifelse(D.tes$Class == 2, 0, 1)
D.tra$Class <- ifelse(D.tra$Class == 2, 0, 1)
D.val$Class <- ifelse(D.val$Class == 2, 0, 1)#이진분류 이렇게 설정 안해주면 오류남...
H42 <- c(6,3)
Thres <- 0.07
Step <- 100000
Rate <- 0.01
BPnn <- neuralnet(Class~., D.tra, hidden = H42, threshold = Thres, stepmax = Step, learningrate = Rate,
algorithm = 'backprop', err.fct = 'ce', act.fct = 'logistic', linear.output = FALSE)
cutoff <- 0.5
Output.tra <- predict(BPnn, D.tra)
head(Output.tra)
Predict.tra <- ifelse(Output.tra >= cutoff, 1, 0)
cTab <- table(Actual = D.tra$Class, Predict.tra)
Accu.tra <- round(sum(diag(cTab))/sum(cTab)*100, digits = 2)
Output.val <- predict(BPnn, D.val)
Predict.val <- ifelse(Output.val >= cutoff, 1, 0)
cTab <- table(Actual = D.val$Class, Predict.val)
Accu.val <- round(sum(diag(cTab))/sum(cTab)*100, digits = 2)
cat(sprintf('\n Thres = %4.2f Seed=%5d', Thres, wSeed))
#cat(' Thres', Thres)
#cat(' Seed', wSeed)
cat(' Tra =', Accu.tra)
cat(' Val =', Accu.val)
#Output.tes <- predict(BPnn, D.tes)
#Predict.tes <- ifelse(Output.val >= cutoff, 1, 0)
#cTab <- table(Actual = D.tes$Class, Predict.tes)
#Accu.tes <- sum(diag(cTab))/sum(cTab)*100
#cat(' Tes =', Accu.tes)
}
for (wSeed in wSeedlist){
set.seed(wSeed)
train <- sample.split(D.data$Class, SplitRatio = 0.6)
training <- D.data[train, ]
remainder <- D.data[!train, ]
validate <- sample.split(remainder$Class, SplitRatio = 0.5)
validation <- remainder[validate, ]
test <- remainder[!validate, ]
Tra <- training
Val <- validation
Tes <- test
D.tra <- Tra[, -c(1)]
D.val <- Val[, -c(1)]
D.tes <- Tes[, -c(1)]
D.tes$Class <- ifelse(D.tes$Class == 2, 0, 1)
D.tra$Class <- ifelse(D.tra$Class == 2, 0, 1)
D.val$Class <- ifelse(D.val$Class == 2, 0, 1)#이진분류 이렇게 설정 안해주면 오류남...
H42 <- c(4,2)
Thres <- 1
Step <- 100000
Rate <- 0.01
BPnn <- neuralnet(Class~., D.tra, hidden = H42, threshold = Thres, stepmax = Step, learningrate = Rate,
algorithm = 'backprop', err.fct = 'ce', act.fct = 'logistic', linear.output = FALSE)
cutoff <- 0.5
Output.tra <- predict(BPnn, D.tra)
head(Output.tra)
Predict.tra <- ifelse(Output.tra >= cutoff, 1, 0)
cTab <- table(Actual = D.tra$Class, Predict.tra)
Accu.tra <- round(sum(diag(cTab))/sum(cTab)*100, digits = 2)
Output.val <- predict(BPnn, D.val)
Predict.val <- ifelse(Output.val >= cutoff, 1, 0)
cTab <- table(Actual = D.val$Class, Predict.val)
Accu.val <- round(sum(diag(cTab))/sum(cTab)*100, digits = 2)
cat(sprintf('\n Thres = %4.2f Seed=%5d', Thres, wSeed))
#cat(' Thres', Thres)
#cat(' Seed', wSeed)
cat(' Tra =', Accu.tra)
cat(' Val =', Accu.val)
#Output.tes <- predict(BPnn, D.tes)
#Predict.tes <- ifelse(Output.val >= cutoff, 1, 0)
#cTab <- table(Actual = D.tes$Class, Predict.tes)
#Accu.tes <- sum(diag(cTab))/sum(cTab)*100
#cat(' Tes =', Accu.tes)
}
for (wSeed in wSeedlist){
set.seed(wSeed)
train <- sample.split(D.data$Class, SplitRatio = 0.6)
training <- D.data[train, ]
remainder <- D.data[!train, ]
validate <- sample.split(remainder$Class, SplitRatio = 0.5)
validation <- remainder[validate, ]
test <- remainder[!validate, ]
Tra <- training
Val <- validation
Tes <- test
D.tra <- Tra[, -c(1)]
D.val <- Val[, -c(1)]
D.tes <- Tes[, -c(1)]
D.tes$Class <- ifelse(D.tes$Class == 2, 0, 1)
D.tra$Class <- ifelse(D.tra$Class == 2, 0, 1)
D.val$Class <- ifelse(D.val$Class == 2, 0, 1)#이진분류 이렇게 설정 안해주면 오류남...
H42 <- c(4,2)
Thres <- 0.07
Step <- 100000
Rate <- 0.01
BPnn <- neuralnet(Class~., D.tra, hidden = H42, threshold = Thres, stepmax = Step, learningrate = Rate,
algorithm = 'backprop', err.fct = 'ce', act.fct = 'logistic', linear.output = FALSE)
cutoff <- 0.5
Output.tra <- predict(BPnn, D.tra)
head(Output.tra)
Predict.tra <- ifelse(Output.tra >= cutoff, 1, 0)
cTab <- table(Actual = D.tra$Class, Predict.tra)
Accu.tra <- round(sum(diag(cTab))/sum(cTab)*100, digits = 2)
Output.val <- predict(BPnn, D.val)
Predict.val <- ifelse(Output.val >= cutoff, 1, 0)
cTab <- table(Actual = D.val$Class, Predict.val)
Accu.val <- round(sum(diag(cTab))/sum(cTab)*100, digits = 2)
cat(sprintf('\n Thres = %4.2f Seed=%5d', Thres, wSeed))
#cat(' Thres', Thres)
#cat(' Seed', wSeed)
cat(' Tra =', Accu.tra)
cat(' Val =', Accu.val)
#Output.tes <- predict(BPnn, D.tes)
#Predict.tes <- ifelse(Output.val >= cutoff, 1, 0)
#cTab <- table(Actual = D.tes$Class, Predict.tes)
#Accu.tes <- sum(diag(cTab))/sum(cTab)*100
#cat(' Tes =', Accu.tes)
}
for (wSeed in wSeedlist){
set.seed(wSeed)
train <- sample.split(D.data$Class, SplitRatio = 0.6)
training <- D.data[train, ]
remainder <- D.data[!train, ]
validate <- sample.split(remainder$Class, SplitRatio = 0.5)
validation <- remainder[validate, ]
test <- remainder[!validate, ]
Tra <- training
Val <- validation
Tes <- test
D.tra <- Tra[, -c(1)]
D.val <- Val[, -c(1)]
D.tes <- Tes[, -c(1)]
D.tes$Class <- ifelse(D.tes$Class == 2, 0, 1)
D.tra$Class <- ifelse(D.tra$Class == 2, 0, 1)
D.val$Class <- ifelse(D.val$Class == 2, 0, 1)#이진분류 이렇게 설정 안해주면 오류남...
H42 <- c(8,5)
Thres <- 0.07
Step <- 100000
Rate <- 0.01
BPnn <- neuralnet(Class~., D.tra, hidden = H42, threshold = Thres, stepmax = Step, learningrate = Rate,
algorithm = 'backprop', err.fct = 'ce', act.fct = 'logistic', linear.output = FALSE)
cutoff <- 0.5
Output.tra <- predict(BPnn, D.tra)
head(Output.tra)
Predict.tra <- ifelse(Output.tra >= cutoff, 1, 0)
cTab <- table(Actual = D.tra$Class, Predict.tra)
Accu.tra <- round(sum(diag(cTab))/sum(cTab)*100, digits = 2)
Output.val <- predict(BPnn, D.val)
Predict.val <- ifelse(Output.val >= cutoff, 1, 0)
cTab <- table(Actual = D.val$Class, Predict.val)
Accu.val <- round(sum(diag(cTab))/sum(cTab)*100, digits = 2)
cat(sprintf('\n Thres = %4.2f Seed=%5d', Thres, wSeed))
#cat(' Thres', Thres)
#cat(' Seed', wSeed)
cat(' Tra =', Accu.tra)
cat(' Val =', Accu.val)
#Output.tes <- predict(BPnn, D.tes)
#Predict.tes <- ifelse(Output.val >= cutoff, 1, 0)
#cTab <- table(Actual = D.tes$Class, Predict.tes)
#Accu.tes <- sum(diag(cTab))/sum(cTab)*100
#cat(' Tes =', Accu.tes)
}
for (wSeed in wSeedlist){
set.seed(wSeed)
train <- sample.split(D.data$Class, SplitRatio = 0.6)
training <- D.data[train, ]
remainder <- D.data[!train, ]
validate <- sample.split(remainder$Class, SplitRatio = 0.5)
validation <- remainder[validate, ]
test <- remainder[!validate, ]
Tra <- training
Val <- validation
Tes <- test
D.tra <- Tra[, -c(1)]
D.val <- Val[, -c(1)]
D.tes <- Tes[, -c(1)]
D.tes$Class <- ifelse(D.tes$Class == 2, 0, 1)
D.tra$Class <- ifelse(D.tra$Class == 2, 0, 1)
D.val$Class <- ifelse(D.val$Class == 2, 0, 1)#이진분류 이렇게 설정 안해주면 오류남...
H42 <- c(8,5)
Thres <- 0.5
Step <- 100000
Rate <- 0.01
BPnn <- neuralnet(Class~., D.tra, hidden = H42, threshold = Thres, stepmax = Step, learningrate = Rate,
algorithm = 'backprop', err.fct = 'ce', act.fct = 'logistic', linear.output = FALSE)
cutoff <- 0.5
Output.tra <- predict(BPnn, D.tra)
head(Output.tra)
Predict.tra <- ifelse(Output.tra >= cutoff, 1, 0)
cTab <- table(Actual = D.tra$Class, Predict.tra)
Accu.tra <- round(sum(diag(cTab))/sum(cTab)*100, digits = 2)
Output.val <- predict(BPnn, D.val)
Predict.val <- ifelse(Output.val >= cutoff, 1, 0)
cTab <- table(Actual = D.val$Class, Predict.val)
Accu.val <- round(sum(diag(cTab))/sum(cTab)*100, digits = 2)
cat(sprintf('\n Thres = %4.2f Seed=%5d', Thres, wSeed))
#cat(' Thres', Thres)
#cat(' Seed', wSeed)
cat(' Tra =', Accu.tra)
cat(' Val =', Accu.val)
#Output.tes <- predict(BPnn, D.tes)
#Predict.tes <- ifelse(Output.val >= cutoff, 1, 0)
#cTab <- table(Actual = D.tes$Class, Predict.tes)
#Accu.tes <- sum(diag(cTab))/sum(cTab)*100
#cat(' Tes =', Accu.tes)
}
for (wSeed in wSeedlist){
set.seed(wSeed)
train <- sample.split(D.data$Class, SplitRatio = 0.6)
training <- D.data[train, ]
remainder <- D.data[!train, ]
validate <- sample.split(remainder$Class, SplitRatio = 0.5)
validation <- remainder[validate, ]
test <- remainder[!validate, ]
Tra <- training
Val <- validation
Tes <- test
D.tra <- Tra[, -c(1)]
D.val <- Val[, -c(1)]
D.tes <- Tes[, -c(1)]
D.tes$Class <- ifelse(D.tes$Class == 2, 0, 1)
D.tra$Class <- ifelse(D.tra$Class == 2, 0, 1)
D.val$Class <- ifelse(D.val$Class == 2, 0, 1)#이진분류 이렇게 설정 안해주면 오류남...
H42 <- c(8,5)
Thres <- 1
Step <- 100000
Rate <- 0.01
BPnn <- neuralnet(Class~., D.tra, hidden = H42, threshold = Thres, stepmax = Step, learningrate = Rate,
algorithm = 'backprop', err.fct = 'ce', act.fct = 'logistic', linear.output = FALSE)
cutoff <- 0.5
Output.tra <- predict(BPnn, D.tra)
head(Output.tra)
Predict.tra <- ifelse(Output.tra >= cutoff, 1, 0)
cTab <- table(Actual = D.tra$Class, Predict.tra)
Accu.tra <- round(sum(diag(cTab))/sum(cTab)*100, digits = 2)
Output.val <- predict(BPnn, D.val)
Predict.val <- ifelse(Output.val >= cutoff, 1, 0)
cTab <- table(Actual = D.val$Class, Predict.val)
Accu.val <- round(sum(diag(cTab))/sum(cTab)*100, digits = 2)
cat(sprintf('\n Thres = %4.2f Seed=%5d', Thres, wSeed))
#cat(' Thres', Thres)
#cat(' Seed', wSeed)
cat(' Tra =', Accu.tra)
cat(' Val =', Accu.val)
#Output.tes <- predict(BPnn, D.tes)
#Predict.tes <- ifelse(Output.val >= cutoff, 1, 0)
#cTab <- table(Actual = D.tes$Class, Predict.tes)
#Accu.tes <- sum(diag(cTab))/sum(cTab)*100
#cat(' Tes =', Accu.tes)
}
for (wSeed in wSeedlist){
set.seed(wSeed)
train <- sample.split(D.data$Class, SplitRatio = 0.6)
training <- D.data[train, ]
remainder <- D.data[!train, ]
validate <- sample.split(remainder$Class, SplitRatio = 0.5)
validation <- remainder[validate, ]
test <- remainder[!validate, ]
Tra <- training
Val <- validation
Tes <- test
D.tra <- Tra[, -c(1)]
D.val <- Val[, -c(1)]
D.tes <- Tes[, -c(1)]
D.tes$Class <- ifelse(D.tes$Class == 2, 0, 1)
D.tra$Class <- ifelse(D.tra$Class == 2, 0, 1)
D.val$Class <- ifelse(D.val$Class == 2, 0, 1)#이진분류 이렇게 설정 안해주면 오류남...
H42 <- c(6,3)
Thres <- 0.5
Step <- 100000
Rate <- 0.01
BPnn <- neuralnet(Class~., D.tra, hidden = H42, threshold = Thres, stepmax = Step, learningrate = Rate,
algorithm = 'backprop', err.fct = 'ce', act.fct = 'logistic', linear.output = FALSE)
cutoff <- 0.5
Output.tra <- predict(BPnn, D.tra)
head(Output.tra)
Predict.tra <- ifelse(Output.tra >= cutoff, 1, 0)
cTab <- table(Actual = D.tra$Class, Predict.tra)
Accu.tra <- round(sum(diag(cTab))/sum(cTab)*100, digits = 2)
Output.val <- predict(BPnn, D.val)
Predict.val <- ifelse(Output.val >= cutoff, 1, 0)
cTab <- table(Actual = D.val$Class, Predict.val)
Accu.val <- round(sum(diag(cTab))/sum(cTab)*100, digits = 2)
cat(sprintf('\n Thres = %4.2f Seed=%5d', Thres, wSeed))
#cat(' Thres', Thres)
#cat(' Seed', wSeed)
cat(' Tra =', Accu.tra)
cat(' Val =', Accu.val)
Output.tes <- predict(BPnn, D.tes)
Predict.tes <- ifelse(Output.val >= cutoff, 1, 0)
cTab <- table(Actual = D.tes$Class, Predict.tes)
Accu.tes <- sum(diag(cTab))/sum(cTab)*100
cat(' Tes =', Accu.tes)
}
for (wSeed in wSeedlist){
set.seed(wSeed)
train <- sample.split(D.data$Class, SplitRatio = 0.6)
training <- D.data[train, ]
remainder <- D.data[!train, ]
validate <- sample.split(remainder$Class, SplitRatio = 0.5)
validation <- remainder[validate, ]
test <- remainder[!validate, ]
Tra <- training
Val <- validation
Tes <- test
D.tra <- Tra[, -c(1)]
D.val <- Val[, -c(1)]
D.tes <- Tes[, -c(1)]
D.tes$Class <- ifelse(D.tes$Class == 2, 0, 1)
D.tra$Class <- ifelse(D.tra$Class == 2, 0, 1)
D.val$Class <- ifelse(D.val$Class == 2, 0, 1)#이진분류 이렇게 설정 안해주면 오류남...
H42 <- c(6,3)
Thres <- 1
Step <- 100000
Rate <- 0.01
BPnn <- neuralnet(Class~., D.tra, hidden = H42, threshold = Thres, stepmax = Step, learningrate = Rate,
algorithm = 'backprop', err.fct = 'ce', act.fct = 'logistic', linear.output = FALSE)
cutoff <- 0.5
Output.tra <- predict(BPnn, D.tra)
head(Output.tra)
Predict.tra <- ifelse(Output.tra >= cutoff, 1, 0)
cTab <- table(Actual = D.tra$Class, Predict.tra)
Accu.tra <- round(sum(diag(cTab))/sum(cTab)*100, digits = 2)
Output.val <- predict(BPnn, D.val)
Predict.val <- ifelse(Output.val >= cutoff, 1, 0)
cTab <- table(Actual = D.val$Class, Predict.val)
Accu.val <- round(sum(diag(cTab))/sum(cTab)*100, digits = 2)
cat(sprintf('\n Thres = %4.2f Seed=%5d', Thres, wSeed))
#cat(' Thres', Thres)
#cat(' Seed', wSeed)
cat(' Tra =', Accu.tra)
cat(' Val =', Accu.val)
Output.tes <- predict(BPnn, D.tes)
Predict.tes <- ifelse(Output.val >= cutoff, 1, 0)
cTab <- table(Actual = D.tes$Class, Predict.tes)
Accu.tes <- sum(diag(cTab))/sum(cTab)*100
cat(' Tes =', Accu.tes)
}
train
View(train)
View(test)
test
str(test)
library(caTools)
library(e1071)
library(neuralnet)
wSeedlist <- c(10000, 11000, 50000, 12222, 14000, 15000, 12362, 17000, 12341, 71000)
D.data <- read.csv('bCancerWC.csv', header = TRUE)
for (wSeed in wSeedlist){
set.seed(wSeed)
train <- sample.split(D.data$Class, SplitRatio = 0.6)
training <- D.data[train, ]
remainder <- D.data[!train, ]
validate <- sample.split(remainder$Class, SplitRatio = 0.5)
validation <- remainder[validate, ]
test <- remainder[!validate, ]
Tra <- training
Val <- validation
Tes <- test
D.tra <- Tra[, -c(1)]
D.val <- Val[, -c(1)]
D.tes <- Tes[, -c(1)]
D.tes$Class <- ifelse(D.tes$Class == 2, 0, 1)
D.tra$Class <- ifelse(D.tra$Class == 2, 0, 1)
D.val$Class <- ifelse(D.val$Class == 2, 0, 1)#이진분류 이렇게 설정 안해주면 오류남...
H42 <- c(6,3)
Thres <- 0.5
Step <- 100000
Rate <- 0.01
BPnn <- neuralnet(Class~., D.tra, hidden = H42, threshold = Thres, stepmax = Step, learningrate = Rate,
algorithm = 'backprop', err.fct = 'ce', act.fct = 'logistic', linear.output = FALSE)
cutoff <- 0.5
Output.tra <- predict(BPnn, D.tra)
head(Output.tra)
Predict.tra <- ifelse(Output.tra >= cutoff, 1, 0)
cTab <- table(Actual = D.tra$Class, Predict.tra)
Accu.tra <- round(sum(diag(cTab))/sum(cTab)*100, digits = 2)
Output.val <- predict(BPnn, D.val)
Predict.val <- ifelse(Output.val >= cutoff, 1, 0)
cTab <- table(Actual = D.val$Class, Predict.val)
Accu.val <- round(sum(diag(cTab))/sum(cTab)*100, digits = 2)
cat(sprintf('\n Thres = %4.2f Seed=%5d', Thres, wSeed))
#cat(' Thres', Thres)
#cat(' Seed', wSeed)
cat(' Tra =', Accu.tra)
cat(' Val =', Accu.val)
Output.tes <- predict(BPnn, D.tes)
Predict.tes <- ifelse(Output.val >= cutoff, 1, 0)
cTab <- table(Actual = D.tes$Class, Predict.tes)
Accu.tes <- sum(diag(cTab))/sum(cTab)*100
cat(' Tes =', Accu.tes)
}
for (wSeed in wSeedlist){
set.seed(wSeed)
train <- sample.split(D.data$Class, SplitRatio = 0.6)
training <- D.data[train, ]
remainder <- D.data[!train, ]
validate <- sample.split(remainder$Class, SplitRatio = 0.5)
validation <- remainder[validate, ]
test <- remainder[!validate, ]
Tra <- training
Val <- validation
Tes <- test
D.tra <- Tra[, -c(1)]
D.val <- Val[, -c(1)]
D.tes <- Tes[, -c(1)]
D.tes$Class <- ifelse(D.tes$Class == 2, 0, 1)
D.tra$Class <- ifelse(D.tra$Class == 2, 0, 1)
D.val$Class <- ifelse(D.val$Class == 2, 0, 1)#이진분류 이렇게 설정 안해주면 오류남...
H42 <- c(6,3)
Thres <- 0.5
Step <- 100000
Rate <- 0.01
BPnn <- neuralnet(Class~., D.tra, hidden = H42, threshold = Thres, stepmax = Step, learningrate = Rate,
algorithm = 'backprop', err.fct = 'ce', act.fct = 'logistic', linear.output = FALSE)
cutoff <- 0.5
Output.tra <- predict(BPnn, D.tra)
head(Output.tra)
Predict.tra <- ifelse(Output.tra >= cutoff, 1, 0)
cTab <- table(Actual = D.tra$Class, Predict.tra)
Accu.tra <- round(sum(diag(cTab))/sum(cTab)*100, digits = 2)
Output.val <- predict(BPnn, D.val)
Predict.val <- ifelse(Output.val >= cutoff, 1, 0)
cTab <- table(Actual = D.val$Class, Predict.val)
Accu.val <- round(sum(diag(cTab))/sum(cTab)*100, digits = 2)
cat(sprintf('\n Thres = %4.2f Seed=%5d', Thres, wSeed))
#cat(' Thres', Thres)
#cat(' Seed', wSeed)
cat(' Tra =', Accu.tra)
cat(' Val =', Accu.val)
Output.tes <- predict(BPnn, D.tes)
Predict.tes <- ifelse(Output.tes >= cutoff, 1, 0)
cTab <- table(Actual = D.tes$Class, Predict.tes)
Accu.tes <- sum(diag(cTab))/sum(cTab)*100
cat(' Tes =', Accu.tes)
}
