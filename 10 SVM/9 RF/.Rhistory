install.packages("tidyverse")
install.packages(c("ggplot2", "twitteR", "syuzhet", "tm", "RColorBrewer", "psych", "descr", "Hmisc"))
install.packages(c("tidyverse", "ggplot2", "twitteR", "syuzhet", "tm", "RColorBrewer", "psych", "descr", "Hmisc"))
install.packages(c("rJava",'stringr', 'hash', 'tau', 'Sejong', 'RSQLite', 'devtools'), type = "binary")
library(KoNLP)
setwd('C:/User/ebiz/Desktop/9 RF')
rm(list = ls)
setwd('C:/User/ebiz/Desktop/9 RF')
rm(list = ls)
Tra <- read.csv('Tra1.csv', header = TRUE)
val <- read.csv('val1.csv', header = TRUE)
Tes <- read.csv('Tes1.csv', header = TRUE)
setwd('C://User/ebiz/Desktop/9 RF')
setwd('C:/User/ebiz/Desktop/9 RF')
setwd("C:/Users/ebiz/Desktop/9 RF")
rm(list = ls)
Tra <- read.csv('Tra1.csv', header = TRUE)
val <- read.csv('val1.csv', header = TRUE)
Tes <- read.csv('Tes1.csv', header = TRUE)
R.tra <- Tra[, -c(1)]
R.tra <- Tra[, -c(1)]
R.val <- val[, -c(1)]
R.tes <- Tes[, -c(1)]
setwd("C:/Users/ebiz/Desktop/8 DT")
setwd("C:/Users/ebiz/Desktop/8 DT")
rm(list = ls())
D.data <- read.csv('HeartD.csv', header = TRUE)
str(D.data)
table(D.data$Class)
Tra <- read.csv('Tra1.csv', header = TRUE)
Val <- read.csv('Val1.csv', header = TRUE)
Tes <- read.csv('Tes1.csv', header = TRUE)
head(Tra)
D.tra <- Tra[, -c(1)]
D.val <- Val[, -c(1)]
D.tes <- Tes[, -c(1)]
#install.packages("rpart")
library(rpart)
set.seed(12345)
e_DT <- rpart(Class ~., D.tra, method = 'class', parms = list(split = 'information')) #?뿏?듃濡쒗뵾 遺덉닚?룄 諛⑹떇.
plot(e_DT, margin = 0.2)
text(e_DT)
e_DT #BC?쓽 ?쑜...T3?? ?쇊履쎌쑝濡?, T6怨? 7?? ?삤瑜몄そ?쑝濡? 遺꾨쪟?븳?떎.
Predict.tra <- predict(e_DT, D.tra, type = 'class')
Actual.tra <- D.tra$Class #?떎?젣媛?
head(Predict.tra)
head(Actual.tra)
#install.packages('caret')
#install.packages('e1071')
library(caret)
library(e1071)
cM1 <- confusionMatrix(Predict.tra, Actual.tra, positive = 'Disease') # ?삁痢? ?뜲?씠?꽣瑜? 癒쇱? ?엯?젰.
cM1
cTab <- table(Actual.tra, Predict.tra)
cTab #洹몃┝?? ?씠?젃寃? 洹몃━怨? ?젙?솗?룄 誘쇨컧?룄 ?듅?씠?룄?뒗 而⑦벂?쟾留ㅽ듃由??뒪濡? ?븣?븘?삩?떎.
#?삉?뒗 ?씠?윴 諛⑸쾿?룄 ?엳?떎!########
Predict.tra <- predict(e_DT, D.tra, type = 'class')
Actual.tra <- D.tra$Class
cTab <- table(Actual.tra, Predict.tra)
cM.tra <- confusionMatrix(t(cTab), positive = 'Disease')
Accu.tra <- cM.tra$overall['Accuracy']
cTab
Accu.tra*100
Predict.val <- predict(e_DT, D.val, type = 'class')
Actual.val <- D.val$Class
cTab <- table(Actual.val, Predict.val)
cM.val <- confusionMatrix(t(cTab), positive = 'Disease')
Accu.val <- cM.val$overall['Accuracy']
cTab
Accu.val*100
#媛吏移섍린 以鍮?
printcp(e_DT) #XERROR媛 媛?옣 ?옉?쓣 ?븣 媛믪쓣 媛?졇???빞 ?븳?떎.
cpval <- e_DT$cptable[which.min(e_DT$cptable[, 'xerror']), 'CP']
cpval
pruned.e_DT <- prune(e_DT, cp = cpval)
plot(pruned.e_DT, margin = 0.2)
#媛吏移섍린 ?븳 嫄몃줈 ?떆?룄?빐蹂몃떎.
Predict.tra <- predict(pruned.e_DT, D.tra, type = 'class')
Actual.tra <- D.tra$Class
cTab <- table(Actual.tra, Predict.tra)
cM.tra <- confusionMatrix(t(cTab), positive = 'Disease')
Accu.tra <- cM.tra$overall['Accuracy']
cTab
Accu.tra*100
Predict.val <- predict(pruned.e_DT, D.val, type = 'class')
Actual.val <- D.val$Class
cTab <- table(Actual.val, Predict.val)
cM.val <- confusionMatrix(t(cTab), positive = 'Disease')
Accu.val <- cM.val$overall['Accuracy']
cTab
Accu.val*100
g_DT <- rpart(Class ~., D.tra, method = 'class', parms = list(split = 'gini')) #?씠嫄곕뒗 吏?땲 遺덉닚?룄 諛⑹떇?씠?떎.
82.58 - 71.67
install.packages('randomForest')
#install.packages('randomForest')
library(randomForest)
x <- subset(R.tra, select = -c(Class))
y <- R.tra$Class
mtrySeed <- 1234
set.seed(mtrySeed)
bestmtry <- tuneRF(x, y, stepFactor = 1.5, improve = 0.01, ntreeTry = 49)
#install.packages('randomForest')
library(randomForest)
x <- subset(R.tra, select = -c(Class))
y <- R.tra$Class
mtrySeed <- 1234
set.seed(mtrySeed)
bestmtry <- tuneRF(x, y, stepFactor = 1.5, improve = 0.01, ntreeTry = 49)
x <- subset(R.tra, select = -c(Class))
y <- R.tra$Class
mtrySeed <- 1234
set.seed(mtrySeed)
bestmtry <- tuneRF(x, y, stepFactor = 1.5, improve = 0.01, ntreeTry = 49)
print(bestmtry)
setwd("C:/Users/ebiz/Desktop/9 RF")
rm(list = ls)
Tra <- read.csv('Tra1.csv', header = TRUE)
val <- read.csv('val1.csv', header = TRUE)
rm(list = ls)
setwd("C:/Users/ebiz/Desktop/9 RF")
Tra <- read.csv('Tra1.csv', header = TRUE)
val <- read.csv('val1.csv', header = TRUE)
Tes <- read.csv('Tes1.csv', header = TRUE)
R.tra <- Tra[, -c(1)]
R.val <- val[, -c(1)]
R.tes <- Tes[, -c(1)]
#install.packages('randomForest')
library(randomForest)
x <- subset(R.tra, select = -c(Class))
y <- R.tra$Class
mtrySeed <- 1234
set.seed(mtrySeed)
bestmtry <- tuneRF(x, y, stepFactor = 1.5, improve = 0.01, ntreeTry = 49)
nTree <- 49
mTry <- 4
rfseed <- 12345
set.seed(rfseed)
rfModel <- randomForest(x, y, ntree = nTree, mtry = mTry) #이미 x와 y로 나눴기에 알아서 형식에 따라 메서드를 정한다.
#그러니까 class를 정할 필요가 없다.
Predict.tra <- predict(rfModel, R.tra)
cTab <- table(Actual = R.tra$Class, Predict.tra)
cTab
Accu.tra <- sum(diag(cTab))/sum(cTab)*100
Accu.tra
# training 끝...val 시작.
Predict.val <- predict(rfModel, R.val)
levels(R.val$CP) <- levels(R.tra$CP)
levels(R.val$Restecg) <- levels(R.tra$Restecg)
levels(R.val$Slope) <- levels(R.tra$Slope)
levels(R.val$Thal) <- levels(R.tra$Thal)
Predict.val <- predict(rfModel, R.val)
cTab <- table(Actual = R.val$Class, Predict.val)
Accu.val <- sum(diag(cTab))/sum(cTab)*100
Variance <- abs(Acuu.tra-Accu.val)
Accu.tra
Accu.val
Variance
variance
variance <- abs(Acuu.tra-Accu.val)
Accu.tra
variance <- abs(Acuu.tra - Accu.val)
variance <- abs(Accu.tra - Accu.val)
Accu.tra
Accu.val
variance
rfModel <- randomForest(x, y, ntree = nTree, mtry = mTry, maxnodes = maxLeaf)
maxLeaf <- 10
rfModel <- randomForest(x, y, ntree = nTree, mtry = mTry, maxnodes = maxLeaf)
Variance <- abs(Accu.tra - Accu.val)
Predict.tra <- predict(rfModel, R.tra)
cTab <- table(Actual = R.tra$Class, Predict.tra)
Accu.tra <- sum(diag(cTab))/sum(cTab)*100
Predict.val <- predict(rfModel, R.val)
cTab <- table(Actual = R.val$Class, Predict.val)
Accu.val <- sum(diag(cTab))/sum(cTab)*100
Variance <- abs(Accu.tra - Accu.val)
nTree; mTry; maxLeaf
Accu.tra
Accu.val
Variance
